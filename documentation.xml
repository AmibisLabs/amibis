<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="xsl/page.xsl" ?>

<page xmlns="http://custom" xmlns:custom="http://custom" xmlns:xi="http://www.w3.org/2001/XInclude">
  <xi:include href="common/common.xml#xpointer(//*)" />

  <title>OMiSCID Documentation Page</title>
  <currentMenu id="Documentation"/>

  <custom:content xmlns="http://www.w3.org/1999/xhtml">
    <h1>Installation</h1>
    
    <h2>C++</h2>
      <p>Current version of <omiscid/> requires DNSSD to be installed and running. For example, you can use mDNSResponder (Bonjour from Apple) or avahi (only available under linux).</p>
      <p>In order to compile your <omiscid/> source code, you will need to have Bonjour, libxml with their C++ headers and libs for bindings (see "README" file from the release for more details).</p>
    <h2>Java</h2>
      <h3>Required files</h3>
      <p>Developing <omiscid/> services in plain Java requires to have some jars in your classpath. If you are using Java 6.0 or later, all dependencies are bundled in the <omiscid/> release available on the <a href="download.xml">download page</a>.
         Under Java 5.0, a <a href="https://jaxb.dev.java.net/">JAXB implementation</a> is also required: JAXB jars (jaxb-impl.jar, jaxb-api.jar, activation.jar, jsr173_1.0_api.jar) must be in the classpath when running <omiscid/> applications with Java 5.0.</p>
      <p>See the tutorial section on this page for details on how to build a service from scratch.</p>
      
      <h3>DNSSD and bundled files</h3>
      <p>Java version of <omiscid/> may choose a DNSSD implementation installed on your computer at runtime. It can also use a 100% pure Java implementation, included in the release (<a href="#dnssd-impl">see details about choosing a DNSSD implementation</a>). OSGi <omiscid/> tutorial explains how to install and use mDNSResponder (Apple Bonjour) together with its Java bindings.</p>
      <p>Since version 1.5.0, plain Java <omiscid/> provides the following files:</p>
        <ul>
          <li>omiscid-1.?.?.jar: the omiscid library</li>
          <li>(opt-dnssd) dbus*.jar, debug-*.jar, hexdump*.jar, unix*.jar and libunix-java.so: for an alternative DNSSD access using <a href="http://avahi.org/">avahi</a> accessed through <a href="http://dbus.freedesktop.org/">dbus</a></li>
          <li>(opt-dnssd) JiveDNS-1.1-lightened.jar: <a href="https://jivedns.dev.java.net/">jivedns jar, a pure Java implementation of DNSSD</a> for an alternative DNSSD access</li>
          <li>(opt-deprecated) omiscid-gui-1.?.?.jar: the old <omiscid/> gui to be run with <code>java -jar</code>, to use only if you're nostalgic</li>
          <!--li>castor-1.0.5-xml.jar, xerces.jar, commons-logging-1.1.jar: the base libraries required by <a href="http://www.castor.org/xml-framework.html">Castor XML</a></li>
          <li>jakarta-oro-2.0.8.jar: the <a href="http://jakarta.apache.org/oro/">apache jakarta oro library</a> required by some Castor XML features</li-->
        </ul>
      
      <!--p>
        Both Castor (and its dependencies) and Oro are now bundled with the <omiscid/> release.
        Note that dependencies to Castor will perhaps be replaced when Java 6 will be widely used.
      </p-->
    <h2>OSGi</h2>
    <h3>Since 1.5.0</h3>
      <p>Since version 1.5.0, the OSGi version of <omiscid/> is tested on the <a href="http://felix.apache.org/site/index.html">Felix</a> OSGi platform and it requires <a href="http://felix.apache.org/site/ipojo.html">iPOJO</a> and a Java 6 virtual machine. The castor bundle is <em>not</em> required <em>anymore</em>.</p>
    <h3>Before 1.5.0</h3>
      <p>OSGi bundle version of <omiscid/> has been tested on the Oscar OSGi platform. To install it, you also need to install the castor bundle available on the <a href="download.xml">download page</a>.</p>
      <p>For further details, you can look at the OSGi tutorial below.</p>

    <h2><omiscid/> GUI</h2>
      <p>See also <a href="omiscidgui.xml">the page on <omiscid/> GUI</a></p>
      <p>In replacement for the old <omiscid/> gui that is bundled with the plain java version of <omiscid/>, one can use the new <omiscid/> GUI. This new version is a standalone application that can be easily extended by adding some modules or plugins.</p>
      <p>To run the new GUI you need to download <omiscid/> GUI zip file on the <a href="download.xml">download page</a>, unzip it and run executable present in bin folder. MacOSX users, please feel free to contact us, we will provide you with a MacOSX version.</p>
      <p>You can access basic functionalities by right clicking on service connectors and variables in tree on the right. Plugins for the GUI can add some actions to the possible ones appearing in the context menu. You can manage installed plugins through the Tool->Plugins menu entry.</p>
    
    <h1>Tutorials</h1>
    <h2>C++</h2>
      <p>You can use the following resources in order to train yourself using <omiscid/>:
         <ul>
           <li>the under-development version of the  <a href="download/doc-c++/Doc/index.html">doxygen documentation</a></li>
           <li>a <a href="download/doc-c++/OMiSCID-C++Tutorial.pdf">tutorial</a> about using user-friendly interface to build  <omiscid/> services.</li>
        </ul>
      </p>
    <h2>Java</h2>
      <p>Some tutorial screencasts show how to easily create <omiscid/> services. Starting with only the files downloaded from <a href="http://gforge.inria.fr/frs/?group_id=363">gforge download page</a> (plain Java release), one can learn to code, run and view an <omiscid/> service in less than 3 minutes (see <a href="screencasts/screencasts.xml#netbeans/empty-omiscid-service">minimal service screencast</a> and its dependencies).</p>
      <p>You can find all <omiscid/> screencasts on <a href="screencasts/screencasts.xml">the <omiscid/> screencasts page</a>.</p>
      <p>You can access the <a href="download/doc-java/javadoc/index.html">javadoc of the user centered API</a> on this website.</p>
      <p>As the C++ and Java APIs are almost identical (modulo the languages specifity), you can also have a look at the C++ tutorials. Your favorite IDE will probably allow you to cope with the slight differences between the C++ and Java APIs.</p>
      <p>You can also have a look at the OSGi tutorial. In fact, OSGi version of <omiscid/> uses directly the Java version most code from the OSGi tutorial is plain <omiscid/> Java code (only deployment and life cycle management differ between Java and OSGi versions).</p>
    <h2>OSGi</h2>
      <p>Here is a <a href="download/doc-osgi/tutorial.pdf">pre-final release</a> of the <omiscid/> OSGi tutorial. The tutorial references some files that can be found in <a href="download/doc-osgi/curves.zip">a zip of the "curves" files</a>.</p>

    <h1>Custom Settings</h1>
    <h2>Working domain name</h2>
      <p><omiscid/> services are registered under DNSSD in a dedicated domain. By default this domain is <code>_bip._tcp</code> but one can choose the domain in which <omiscid/> will declare and look for services. This can be done by setting the <code>OMISCID_WORKING_DOMAIN</code> environment variable, for example to <code>_bip_test._tcp</code>.</p>
    <h2>Name resolution</h2>
      <p>By default, <omiscid/> uses standard DNS for host name resolution. In some configurations such as Ad-Hoc networks, where there is no DNS server or not all hosts are known by the DNS server, one can use DNSSD for name resolution. This can be done by setting the <code>OMISCIDNS_USE_MDNS_NAME_SOLVING</code> environment variable to any value, for example to <code>true</code>.</p>
    <h2>DNSSD implementation</h2>
      <a name="dnssd-impl"/>
      <p>Java (and OSGi) version of <omiscid/> allows the user to choose how to access DNSSD. This can be controlled using the <code>OMISCID_DNSSD_FACTORY</code> environment variable. By default, <omiscid/> tries to find the best implementation given its runtime environment, it is however possible to force <omiscid/> to try a given method first. The environment variable can take the following values:
        <ul>
          <li><code>mdns</code>: this uses mDNSResponder from Apple. Apple Java binding are known to have some bugs that can affect <omiscid/> in some cases (e.g. big service descriptions).</li>
          <li><code>jmdns</code>: this uses a 100% pure Java implementation of DNSSD (jivedns). This implementation has a long warm up time.</li>
          <li><code>avahi</code>: this uses a running avahi daemon. This requires to have an avahi daemon running (present in all recent linux distributions). <omiscid/> accesses the daemon through the gnome software bus: dbus</li>
        </ul>
      </p>
      <p>One can set the <code>OMISCID_DNSSD_FACTORY_VERBOSE_MODE</code> environment variable (to any value) to have <omiscid/> display the implementations being tried (the last shown will be the one used).</p>

    <h1>Presentations</h1>
    <p>If you want to look at some slides presenting <omiscid/>, you can just watch <a href="download/doc-all/presentation-1/index.html">an (old) html presentation of <omiscid/></a>.</p>
    <p>The <omiscid/> “day 1” presentation can be obtained on demand only (by now), don't hesitate.</p>
    <p>The <omiscid/> <a href="download/doc-all/extending-omiscidgui/starter.xhtml#slide1">“day 2” presentation</a> on advanced tips and tricks and on the extension of <omiscid/> GUI.</p>
    
    <h1>Publications</h1>
    <p>For a detailled description of <omiscid/> architecture and design goals, see this <a href="http://www-prima.inrialpes.fr/prima/pub/Publications/2006/EVRL06/">paper presented at the IEEE workshop SIPE-2006</a>.</p>
  </custom:content>

</page>
